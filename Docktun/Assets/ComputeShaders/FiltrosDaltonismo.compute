// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSDeuteranopia

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> Source;
RWTexture2D<float4> Result;
int2 SourceTextureSize;

[numthreads(8,8,1)]
void CSDeuteranopia(uint3 id : SV_DispatchThreadID)
{
    float4 color = Source.Load(int3(id.xy, 0));

    float r = color.r;
    float g = color.g;
    float b = color.b;

    float3x3 deuteranopiaMatrix = {
        0.625, 0.7, 0.0,
        0.375, 0.3, 0.3,
        0.0,   0.0, 0.7
    };

    float3 transformed = mul(float3(r, g, b), deuteranopiaMatrix);

    // Voltear la imagen en el eje Y, ya que ReadPixels de Texture2D tiene
    // el (0,0) en la esquina inferior izq mientras que PNG lo tiene en
    // la superior izq.
    uint2 flippedCoord = id.xy;
    flippedCoord.y = SourceTextureSize.y - 1 - id.y;

    Result[flippedCoord] = float4(transformed, color.a);
}
